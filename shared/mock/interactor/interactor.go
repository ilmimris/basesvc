// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iwanjunaid/basesvc/usecase/author/interactor (interfaces: AuthorInteractor)

// Package interactor is a generated GoMock package.
package interactor

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/iwanjunaid/basesvc/domain/model"
	reflect "reflect"
)

// MockAuthorInteractor is a mock of AuthorInteractor interface
type MockAuthorInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorInteractorMockRecorder
}

// MockAuthorInteractorMockRecorder is the mock recorder for MockAuthorInteractor
type MockAuthorInteractorMockRecorder struct {
	mock *MockAuthorInteractor
}

// NewMockAuthorInteractor creates a new mock instance
func NewMockAuthorInteractor(ctrl *gomock.Controller) *MockAuthorInteractor {
	mock := &MockAuthorInteractor{ctrl: ctrl}
	mock.recorder = &MockAuthorInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorInteractor) EXPECT() *MockAuthorInteractorMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAuthorInteractor) Create(arg0 context.Context, arg1 *model.Author) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAuthorInteractorMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorInteractor)(nil).Create), arg0, arg1)
}

// CreateDocument mocks base method
func (m *MockAuthorInteractor) CreateDocument(arg0 context.Context, arg1 *model.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDocument", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDocument indicates an expected call of CreateDocument
func (mr *MockAuthorInteractorMockRecorder) CreateDocument(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDocument", reflect.TypeOf((*MockAuthorInteractor)(nil).CreateDocument), arg0, arg1)
}

// GetAll mocks base method
func (m *MockAuthorInteractor) GetAll(arg0 context.Context) ([]*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockAuthorInteractorMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAuthorInteractor)(nil).GetAll), arg0)
}
