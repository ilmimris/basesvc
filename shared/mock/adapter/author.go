// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/controller/author.go

// Package controller is a generated GoMock package.
package controller

import (
	fiber "github.com/gofiber/fiber/v2"
	gomock "github.com/golang/mock/gomock"
	model "github.com/iwanjunaid/basesvc/domain/model"
	reflect "reflect"
)

// MockAuthorController is a mock of AuthorController interface
type MockAuthorController struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorControllerMockRecorder
}

// MockAuthorControllerMockRecorder is the mock recorder for MockAuthorController
type MockAuthorControllerMockRecorder struct {
	mock *MockAuthorController
}

// NewMockAuthorController creates a new mock instance
func NewMockAuthorController(ctrl *gomock.Controller) *MockAuthorController {
	mock := &MockAuthorController{ctrl: ctrl}
	mock.recorder = &MockAuthorControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorController) EXPECT() *MockAuthorControllerMockRecorder {
	return m.recorder
}

// GetAuthors mocks base method
func (m *MockAuthorController) GetAuthors(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthors", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAuthors indicates an expected call of GetAuthors
func (mr *MockAuthorControllerMockRecorder) GetAuthors(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthors", reflect.TypeOf((*MockAuthorController)(nil).GetAuthors), c)
}

// InsertAuthor mocks base method
func (m *MockAuthorController) InsertAuthor(c *fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAuthor", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAuthor indicates an expected call of InsertAuthor
func (mr *MockAuthorControllerMockRecorder) InsertAuthor(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAuthor", reflect.TypeOf((*MockAuthorController)(nil).InsertAuthor), c)
}

// InsertDocument mocks base method
func (m *MockAuthorController) InsertDocument(author *model.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDocument", author)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDocument indicates an expected call of InsertDocument
func (mr *MockAuthorControllerMockRecorder) InsertDocument(author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDocument", reflect.TypeOf((*MockAuthorController)(nil).InsertDocument), author)
}
