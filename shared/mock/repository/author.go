// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/author/repository/author.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/iwanjunaid/basesvc/domain/model"
	reflect "reflect"
)

// MockAuthorSQLRepository is a mock of AuthorSQLRepository interface
type MockAuthorSQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorSQLRepositoryMockRecorder
}

// MockAuthorSQLRepositoryMockRecorder is the mock recorder for MockAuthorSQLRepository
type MockAuthorSQLRepositoryMockRecorder struct {
	mock *MockAuthorSQLRepository
}

// NewMockAuthorSQLRepository creates a new mock instance
func NewMockAuthorSQLRepository(ctrl *gomock.Controller) *MockAuthorSQLRepository {
	mock := &MockAuthorSQLRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorSQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorSQLRepository) EXPECT() *MockAuthorSQLRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockAuthorSQLRepository) FindAll(ctx context.Context) ([]*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockAuthorSQLRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAuthorSQLRepository)(nil).FindAll), ctx)
}

// Create mocks base method
func (m *MockAuthorSQLRepository) Create(ctx context.Context, author *model.Author) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, author)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAuthorSQLRepositoryMockRecorder) Create(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorSQLRepository)(nil).Create), ctx, author)
}

// MockAuthorDocumentRepository is a mock of AuthorDocumentRepository interface
type MockAuthorDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorDocumentRepositoryMockRecorder
}

// MockAuthorDocumentRepositoryMockRecorder is the mock recorder for MockAuthorDocumentRepository
type MockAuthorDocumentRepositoryMockRecorder struct {
	mock *MockAuthorDocumentRepository
}

// NewMockAuthorDocumentRepository creates a new mock instance
func NewMockAuthorDocumentRepository(ctrl *gomock.Controller) *MockAuthorDocumentRepository {
	mock := &MockAuthorDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorDocumentRepository) EXPECT() *MockAuthorDocumentRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockAuthorDocumentRepository) FindAll(ctx context.Context) ([]*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockAuthorDocumentRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAuthorDocumentRepository)(nil).FindAll), ctx)
}

// Create mocks base method
func (m *MockAuthorDocumentRepository) Create(ctx context.Context, author *model.Author) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, author)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAuthorDocumentRepositoryMockRecorder) Create(ctx, author interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorDocumentRepository)(nil).Create), ctx, author)
}

// MockAuthorCacheRepository is a mock of AuthorCacheRepository interface
type MockAuthorCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorCacheRepositoryMockRecorder
}

// MockAuthorCacheRepositoryMockRecorder is the mock recorder for MockAuthorCacheRepository
type MockAuthorCacheRepositoryMockRecorder struct {
	mock *MockAuthorCacheRepository
}

// NewMockAuthorCacheRepository creates a new mock instance
func NewMockAuthorCacheRepository(ctrl *gomock.Controller) *MockAuthorCacheRepository {
	mock := &MockAuthorCacheRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorCacheRepository) EXPECT() *MockAuthorCacheRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockAuthorCacheRepository) Find(ctx context.Context, key string) (*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, key)
	ret0, _ := ret[0].(*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockAuthorCacheRepositoryMockRecorder) Find(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAuthorCacheRepository)(nil).Find), ctx, key)
}

// FindAll mocks base method
func (m *MockAuthorCacheRepository) FindAll(ctx context.Context, key string) ([]*model.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, key)
	ret0, _ := ret[0].([]*model.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockAuthorCacheRepositoryMockRecorder) FindAll(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAuthorCacheRepository)(nil).FindAll), ctx, key)
}

// Create mocks base method
func (m *MockAuthorCacheRepository) Create(ctx context.Context, key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAuthorCacheRepositoryMockRecorder) Create(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthorCacheRepository)(nil).Create), ctx, key, value)
}

// MockAuthorEventRepository is a mock of AuthorEventRepository interface
type MockAuthorEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorEventRepositoryMockRecorder
}

// MockAuthorEventRepositoryMockRecorder is the mock recorder for MockAuthorEventRepository
type MockAuthorEventRepositoryMockRecorder struct {
	mock *MockAuthorEventRepository
}

// NewMockAuthorEventRepository creates a new mock instance
func NewMockAuthorEventRepository(ctrl *gomock.Controller) *MockAuthorEventRepository {
	mock := &MockAuthorEventRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorEventRepository) EXPECT() *MockAuthorEventRepositoryMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockAuthorEventRepository) Publish(ctx context.Context, key, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, key, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockAuthorEventRepositoryMockRecorder) Publish(ctx, key, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockAuthorEventRepository)(nil).Publish), ctx, key, message)
}
