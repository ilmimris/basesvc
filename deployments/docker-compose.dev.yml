version: "3"
services:
  api:
    image: basesvc
    build:
      context: ../.
      dockerfile: ./build/dev.Dockerfile
    container_name: basesvc_api
    ports:
      - 8080:8080
    command: ["air", "-c", "/app/.air.toml"]
    volumes: 
      - ../.:/app
    healthcheck:
        test: nc -z localhost 8080
        interval: 10s
        timeout: 10s
        retries: 30
    depends_on:
        postgres:
            condition: service_healthy
        mongo:
            condition: service_healthy
        kafka:
            condition: service_healthy
  
  consumer:
    image: basesvc
    container_name: basesvc_consumer
    command: ["/app/tmp/basesvc", "consumer"]
    volumes: 
      - ../.:/app
    depends_on:
        api:
            condition: service_healthy

  postgres:
    image: postgres:alpine
    container_name: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - "POSTGRES_DB=${POSTGRES_DB:-postgres}"
      - "POSTGRES_USER=${POSTGRES_USER:-postgres}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-12345678}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U" ,"${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    environment:
      - "MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-root}"
      - "MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-rootpassword}"
      - "MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE:-basesvc}"
    healthcheck:
      test: echo 'db.stats().ok' | mongo localhost:27017/zenbrain --quiet
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:6
    command: redis-server
    # command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - 6379:6379
    # volumes:
    #   - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  zoo:
    image: zookeeper:3.4.9
    container_name: zoo
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zoo:2888:3888
    volumes:
      - zookeeper_data:/data
      - zookeeper_datalog:/datalog

  # refference: https://github.com/simplesteph/kafka-stack-docker-compose
  # please add DOCKER_HOST_IP to your environment variable
  kafka:
    image: confluentinc/cp-kafka:5.5.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
        KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-host.docker.internal}:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
        KAFKA_BROKER_ID: 1
        KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_CREATE_TOPICS: "basesvc:1:1"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
        test: nc -z localhost 9092
        interval: 5s
        timeout: 5s
        retries: 30
    depends_on:
      - zoo

volumes:
  postgres_data:
  mongo_data:
  zookeeper_data:
  zookeeper_datalog:
  kafka_data:
